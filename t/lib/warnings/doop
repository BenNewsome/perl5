__END__
# doop.c
use utf8 ;
$_ = "\x80  \xff" ;
chop ;
EXPECT
########
# NAME logical & with above ff code points are illegal
$_ = "\xFF" & "\x{100}";        # Above ff second
EXPECT
OPTIONS fatal
Use of strings with code points over 0xFF as arguments to bitwise and (&) operator is illegal at - line 1.
########
# NAME logical & with above ff code points are illegal
$_ = "\xFF" | "\x{101}";
EXPECT
OPTIONS fatal
Use of strings with code points over 0xFF as arguments to bitwise or (|) operator is illegal at - line 1.
########
# NAME logical & with above ff code points are illegal
$_ = "\xFF" ^ "\x{102}";
EXPECT
OPTIONS fatal
Use of strings with code points over 0xFF as arguments to bitwise xor (^) operator is illegal at - line 1.
########
# NAME logical & with above ff code points are illegal
$_ = "\x{100}" & "\x{FF}";      # Above ff first
EXPECT
OPTIONS fatal
Use of strings with code points over 0xFF as arguments to bitwise and (&) operator is illegal at - line 1.
########
# NAME logical & with above ff code points are illegal
$_ = "\x{101}" | "\x{FF}";
EXPECT
OPTIONS fatal
Use of strings with code points over 0xFF as arguments to bitwise or (|) operator is illegal at - line 1.
########
# NAME logical & with above ff code points are illegal
$_ = "\x{102}" ^ "\x{FF}";
EXPECT
OPTIONS fatal
Use of strings with code points over 0xFF as arguments to bitwise xor (^) operator is illegal at - line 1.
########
# NAME logical & with above ff code points are illegal
$_ = "\x{100}" & "\x{103}";     # both above ff has just one message raised
EXPECT
OPTIONS fatal
Use of strings with code points over 0xFF as arguments to bitwise and (&) operator is illegal at - line 1.
########
# NAME logical & with above ff code points are illegal
$_ = "\x{101}" | "\x{104}";
EXPECT
OPTIONS fatal
Use of strings with code points over 0xFF as arguments to bitwise or (|) operator is illegal at - line 1.
########
# NAME logical & with above ff code points are illegal
$_ = "\x{102}" ^ "\x{105}";
EXPECT
OPTIONS fatal
Use of strings with code points over 0xFF as arguments to bitwise xor (^) operator is illegal at - line 1.
########
# NAME vec with above ff code points is deprecated
my $foo = "\x{100}" . "\xff\xfe";
eval { vec($foo, 1, 8) };
no warnings 'deprecated';
eval { vec($foo, 1, 8) };
EXPECT
Use of strings with code points over 0xFF as arguments to vec is deprecated. This will be a fatal error in Perl 5.32 at - line 2.
